AWSTemplateFormatVersion: '2010-09-09'  
Transform: AWS::Serverless-2016-10-31  
Description: SAM Template for Child Health Data Platform  

Parameters:  
  S3Bucket:  
    Type: String  
    Default: "child-health-data-bucket-static-default"  # Provide a static default name  
    Description: "Unique S3 bucket name for the application. Ensure it's globally unique."
    
  DynamoDBTable:  
    Type: String
    Default: "child-health-data-table"
    Description: "The DynamoDB table name for storing application data."  

Resources:  
  DataBucket:  
    Type: AWS::S3::Bucket  
    Properties:   
      BucketName: !Ref S3Bucket  # Use the parameter for the bucket name  

  DynamoDBTable:  
    Type: AWS::DynamoDB::Table  
    Properties:  
      TableName: ChildHealthData  
      AttributeDefinitions:  
        - AttributeName: id  
          AttributeType: S  
      KeySchema:  
        - AttributeName: id  
          KeyType: HASH  
      BillingMode: PAY_PER_REQUEST  
      
  # Lambda Function  
  DataHandlerFunction:  
    Type: AWS::Lambda::Function  
    Properties:  
      FunctionName: MyDataHandlerFunction  
      Handler: index.handler  
      Role: !GetAtt LambdaExecutionRole.Arn  
      Code:  
        S3Bucket: !Ref S3Bucket          # Make sure this references the existing S3 bucket parameter  
        S3Key: your-code.zip             # The S3 key where the code is stored  
      Runtime: python3.8                # Specify the runtime you're using  
      Environment:  
        S3_BUCKET: !Ref S3Bucket         # Ensure this is a defined parameter  
        DYNAMODB_TABLE: !Ref DynamoDBTable # Ensure this is a defined parameter  
      Timeout: 30                        # Adjust timeout as needed
  
  # API Gateway  
  MyApiGateway:  
    Type: AWS::ApiGateway::RestApi  
    Properties:  
      Name: ChildHealthDataAPI  
      Description: API for Child Health Data Collection  

  # Step Function  
  ChildHealthWorkflow:  
    Type: AWS::StepFunctions::StateMachine  
    Properties:  
      DefinitionString:   
        !Sub |  
          {  
            "StartAt": "DataIngestion",  
            "States": {  
              "DataIngestion": {  
                "Type": "Task",  
                "Resource": "${DataHandlerFunction.Arn}",  
                "End": true  
              }  
            }  
          }  
      Role: !GetAtt StepFunctionRole.Arn  

  StepFunctionRole:  
    Type: AWS::IAM::Role  
    Properties:  
      AssumeRolePolicyDocument:  
        Version: '2012-10-17'  
        Statement:  
          - Effect: Allow  
            Principal:  
              Service: states.amazonaws.com  
            Action: sts:AssumeRole  
      Policies:  
        - PolicyName: StepFunctionPolicy  
          PolicyDocument:  
            Version: '2012-10-17'  
            Statement:  
              - Effect: Allow  
                Action:  
                  - lambda:InvokeFunction  
                Resource: !GetAtt DataHandlerFunction.Arn  

  NotificationTopic:  
    Type: AWS::SNS::Topic  

  Queue:  
    Type: AWS::SQS::Queue  
    Properties:  
      QueueName: ChildHealthDataQueue  

  # CloudWatch Log Group  
  LogGroup:  
    Type: AWS::Logs::LogGroup  
    Properties:  
      LogGroupName: !Sub "/aws/lambda/${DataHandlerFunction}"  
      RetentionInDays: 14  

Outputs:  
  ApiGatewayURL:  
    Description: "API Gateway endpoint URL"  
    Value: !Sub "https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
