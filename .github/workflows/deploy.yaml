name: CI/CD Pipeline  

on:  
  push:  
    branches:  
      - main  
  pull_request:  
    branches:  
      - main  

jobs:  
  build:  
    runs-on: ubuntu-latest  

    steps:  
      # Step 1: Check out code  
      - name: Check out code  
        uses: actions/checkout@v2  # Use version 2 for stability  

      # Step 2: Install AWS SAM CLI  
      - name: Install AWS SAM CLI  
        run: |  
          sudo apt-get update  
          sudo apt-get install -y python3-pip  
          pip3 install aws-sam-cli  

      # Step 3: List project files for debugging  
      - name: List project files  
        run: ls -R  

      # Step 4: Configure AWS credentials  
      - name: Configure AWS credentials  
        uses: aws-actions/configure-aws-credentials@v1  # Use version 1 for stability  
        with:  
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
          aws-region: 'eu-west-1'  

      # Step 5: Determine unique S3 bucket name for the deployment  
      - name: Generate Unique S3 Bucket Name  
        run: |  
          echo "S3_BUCKET_NAME=child-health-data-bucket-${{ github.run_id }}" >> $GITHUB_ENV 

      # Step 6: Check if the S3 bucket exists  
      - name: Check if S3 Bucket Exists  
        run: |  
          if ! aws s3api head-bucket --bucket ${{ env.S3_BUCKET_NAME }} 2>/dev/null; then  
            echo "Bucket does not exist, creating it."  
            aws s3api create-bucket --bucket ${{ env.S3_BUCKET_NAME }} --region eu-west-1 --create-bucket-configuration LocationConstraint=eu-west-1  
          else  
            echo "Bucket exists."  
          fi

      # Step 6: Zip Lambda function code  
      - name: Zip Lambda function  
        run: |  
          zip -r my_function.zip app/* # Adjust this path according to your repo structure  

      # Step 7: Upload Lambda function zip to S3  
      - name: Upload Lambda Function to S3  
        run: |  
          aws s3 cp my_function.zip s3://${{ env.S3_BUCKET_NAME }}/lambda/my-function.zip  

      # Step 8: Package SAM and use the generated S3 bucket name  
      - name: Package SAM  
        id: package  
        run: |  
          sam package --template-file template.yaml --s3-bucket ${{ env.S3_BUCKET_NAME }} --output-template-file packaged.yaml  

      # Step 9: Update SAM template with the S3 bucket name  
      - name: Update SAM template with S3 bucket name  
        run: |  
          sed -i "s/child-health-data-bucket-static-default/${{ env.S3_BUCKET_NAME }}/g" packaged.yaml  

      # Step 10: Deploy SAM  
      - name: Deploy SAM  
        id: deploy  
        run: |  
          sam deploy --template-file packaged.yaml --stack-name child-health-data-platform --capabilities CAPABILITY_IAM --parameter-overrides LambdaFunctionS3Key="${{ env.S3_BUCKET_NAME }}/lambda/my-function.zip" S3Bucket="${{ env.S3_BUCKET_NAME }}" 

      # Step 11: Get ChangeSet Name  
      - name: Get ChangeSet Name  
        id: get_changeset  
        run: |  
          CHANGES="$(aws cloudformation list-change-sets --stack-name child-health-data-platform --query "Summaries[0].ChangeSetId" --output text)"  
          echo "ChangeSet Name: $CHANGES"  
          echo "::set-output name=changeset::$CHANGES"

      # Step 12: Check ChangeSet Status  
      - name: Check ChangeSet Status  
        id: check_changeset_status  
        run: |  
          CHANGE_SET_NAME="${{ steps.get_changeset.outputs.changeset }}"  
          STATUS="$(aws cloudformation describe-change-set --change-set-name $CHANGE_SET_NAME --stack-name child-health-data-platform --query "Status" --output text)"  
          echo "ChangeSet Status: $STATUS"  
        
          if [ "$STATUS" != "CREATE_COMPLETE" ]; then  
            echo "ChangeSet is not in a valid state to execute. Current status: $STATUS"  
            exit 1  
          fi  
          
      # Step 13: Execute ChangeSet  
      - name: Execute ChangeSet  
        run: |  
          CHANGE_SET_NAME="${{ steps.get_changeset.outputs.changeset }}"   
          aws cloudformation execute-change-set --change-set-name $CHANGE_SET_NAME --stack-name child-health-data-platform
    
